{
  "_id": "_design/all",

  "validate_doc_update": "function(newDoc, oldDoc, userCtx) { if (newDoc['@type'] === 'WebPage') { if (!newDoc.url) { throw({forbidden: 'Document must have a url.'}); } } if (newDoc['@type'] === 'Identity') { if (!newDoc['@id'] || !newDoc['password']) { throw({forbidden: 'User must have a username and password.'}); } } }",

  "views": {
    "urls": {
      "map": "function(doc) { if (doc.url) { emit(doc.url, doc); } if (doc.hasPart && doc.hasPart.isBasedOnUrl) {emit(doc.hasPart.isBasedOnUrl, doc);} if (doc.hasPart && doc.hasPart.associatedMedia && doc.hasPart.associatedMedia.contentUrl) {emit(doc.hasPart.associatedMedia.contentUrl, doc);} }"
    },
    "by_url": {
      "map": "function(doc) { if (doc.url) { emit([doc.url, doc._id], doc); } }"
    },
    "domains": {
      "map": "function(doc) { if(doc['@type'] === 'WebPage') { urls = []; if (doc.url) { urls.push(doc.url) } if (doc.hasPart && doc.hasPart.isBasedOnUrl) { urls.push(doc.hasPart.isBasedOnUrl) } urls.forEach(function(url) { var domain = url.match(/^[a-z][a-z0-9+\\-.]*:\\/\\/([a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]+|\\[[a-z0-9\\-._~%!$&'()*+,;=:]+\\])/)[2]; if (domain) { emit([domain.replace(/^www./g, ''), doc._id], 1); } } ); } }",
      "reduce": "_count"
    },
    "webpages": {
      "map": "function(doc) { if(doc['@type'] === 'WebPage') { emit(doc._id,doc); } }"
    },
    "webpage_count" : {
      "map": "function(doc) { if(doc['@type'] === 'WebPage') { emit(doc.url,1); } }",
      "reduce": "_count"
    },
    "works": {
      "map": "function(doc) { if(doc._id.indexOf('::v') == -1 && doc['@type'] === 'CreativeWork') { emit([doc['@id'], doc.firstReviewed],1); } }",
      "reduce": "_count"
    },
    "users": {
      "map": "function(doc) { if(doc._id.indexOf('::v') == -1 && doc['@type'] === 'Identity') { emit([doc['@id'], doc.created],1); } }",
      "reduce": "_count"
    },
    "usernames": {
      "map": "function(doc) { if(doc._id.indexOf('::v') == -1 && doc['@type'] === 'Identity') { id = doc['@id']; username = id.replace('users/', ''); emit(username,1); } }",
      "reduce": "_count"
    },
    "identities": {
      "map": "function(doc) { if(doc._id.indexOf('::v') == -1 && doc['@type'] === 'Identity') { emit(doc._id,1); } }",
      "reduce": "_count"
    },
    "user_tokens": {
      "map": "function(doc) { if(doc['@type'] === 'Identity') { emit(doc['token'],1); } }",
      "reduce": "_count"
    },
    "reviews": {
      "map": "function(doc) { if(doc['@type'] === 'WebPage') { emit([doc.lastReviewed, doc._id],doc); } }"
    },
    "by_name": {
      "map": "function(doc) { if ('name' in doc) { emit(doc.name, doc['@type']); } }"
    },
    "by_reviewer": {
      "map": "function(doc) { if (doc['@type'] === 'Person') { emit([doc._id], doc); } else if (doc['@type'] === 'WebPage') { emit([doc.reviewedBy['@id'], doc._id], doc); } }"
    }
  }
}
